// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package twingate

import (
	"context"
	"reflect"

	"github.com/emailbob/pulumi-twingate/sdk/go/twingate/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ResourceAccess struct {
	// List of Group IDs that will have permission to access the Resource.
	GroupIds []string `pulumi:"groupIds"`
	// List of Service Account IDs that will have permission to access the Resource.
	ServiceAccountIds []string `pulumi:"serviceAccountIds"`
}

// ResourceAccessInput is an input type that accepts ResourceAccessArgs and ResourceAccessOutput values.
// You can construct a concrete instance of `ResourceAccessInput` via:
//
//	ResourceAccessArgs{...}
type ResourceAccessInput interface {
	pulumi.Input

	ToResourceAccessOutput() ResourceAccessOutput
	ToResourceAccessOutputWithContext(context.Context) ResourceAccessOutput
}

type ResourceAccessArgs struct {
	// List of Group IDs that will have permission to access the Resource.
	GroupIds pulumi.StringArrayInput `pulumi:"groupIds"`
	// List of Service Account IDs that will have permission to access the Resource.
	ServiceAccountIds pulumi.StringArrayInput `pulumi:"serviceAccountIds"`
}

func (ResourceAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAccess)(nil)).Elem()
}

func (i ResourceAccessArgs) ToResourceAccessOutput() ResourceAccessOutput {
	return i.ToResourceAccessOutputWithContext(context.Background())
}

func (i ResourceAccessArgs) ToResourceAccessOutputWithContext(ctx context.Context) ResourceAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAccessOutput)
}

func (i ResourceAccessArgs) ToResourceAccessPtrOutput() ResourceAccessPtrOutput {
	return i.ToResourceAccessPtrOutputWithContext(context.Background())
}

func (i ResourceAccessArgs) ToResourceAccessPtrOutputWithContext(ctx context.Context) ResourceAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAccessOutput).ToResourceAccessPtrOutputWithContext(ctx)
}

// ResourceAccessPtrInput is an input type that accepts ResourceAccessArgs, ResourceAccessPtr and ResourceAccessPtrOutput values.
// You can construct a concrete instance of `ResourceAccessPtrInput` via:
//
//	        ResourceAccessArgs{...}
//
//	or:
//
//	        nil
type ResourceAccessPtrInput interface {
	pulumi.Input

	ToResourceAccessPtrOutput() ResourceAccessPtrOutput
	ToResourceAccessPtrOutputWithContext(context.Context) ResourceAccessPtrOutput
}

type resourceAccessPtrType ResourceAccessArgs

func ResourceAccessPtr(v *ResourceAccessArgs) ResourceAccessPtrInput {
	return (*resourceAccessPtrType)(v)
}

func (*resourceAccessPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAccess)(nil)).Elem()
}

func (i *resourceAccessPtrType) ToResourceAccessPtrOutput() ResourceAccessPtrOutput {
	return i.ToResourceAccessPtrOutputWithContext(context.Background())
}

func (i *resourceAccessPtrType) ToResourceAccessPtrOutputWithContext(ctx context.Context) ResourceAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAccessPtrOutput)
}

type ResourceAccessOutput struct{ *pulumi.OutputState }

func (ResourceAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAccess)(nil)).Elem()
}

func (o ResourceAccessOutput) ToResourceAccessOutput() ResourceAccessOutput {
	return o
}

func (o ResourceAccessOutput) ToResourceAccessOutputWithContext(ctx context.Context) ResourceAccessOutput {
	return o
}

func (o ResourceAccessOutput) ToResourceAccessPtrOutput() ResourceAccessPtrOutput {
	return o.ToResourceAccessPtrOutputWithContext(context.Background())
}

func (o ResourceAccessOutput) ToResourceAccessPtrOutputWithContext(ctx context.Context) ResourceAccessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceAccess) *ResourceAccess {
		return &v
	}).(ResourceAccessPtrOutput)
}

// List of Group IDs that will have permission to access the Resource.
func (o ResourceAccessOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceAccess) []string { return v.GroupIds }).(pulumi.StringArrayOutput)
}

// List of Service Account IDs that will have permission to access the Resource.
func (o ResourceAccessOutput) ServiceAccountIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceAccess) []string { return v.ServiceAccountIds }).(pulumi.StringArrayOutput)
}

type ResourceAccessPtrOutput struct{ *pulumi.OutputState }

func (ResourceAccessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAccess)(nil)).Elem()
}

func (o ResourceAccessPtrOutput) ToResourceAccessPtrOutput() ResourceAccessPtrOutput {
	return o
}

func (o ResourceAccessPtrOutput) ToResourceAccessPtrOutputWithContext(ctx context.Context) ResourceAccessPtrOutput {
	return o
}

func (o ResourceAccessPtrOutput) Elem() ResourceAccessOutput {
	return o.ApplyT(func(v *ResourceAccess) ResourceAccess {
		if v != nil {
			return *v
		}
		var ret ResourceAccess
		return ret
	}).(ResourceAccessOutput)
}

// List of Group IDs that will have permission to access the Resource.
func (o ResourceAccessPtrOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResourceAccess) []string {
		if v == nil {
			return nil
		}
		return v.GroupIds
	}).(pulumi.StringArrayOutput)
}

// List of Service Account IDs that will have permission to access the Resource.
func (o ResourceAccessPtrOutput) ServiceAccountIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResourceAccess) []string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountIds
	}).(pulumi.StringArrayOutput)
}

type ResourceProtocols struct {
	// Whether to allow ICMP (ping) traffic
	AllowIcmp *bool                `pulumi:"allowIcmp"`
	Tcp       ResourceProtocolsTcp `pulumi:"tcp"`
	Udp       ResourceProtocolsUdp `pulumi:"udp"`
}

// ResourceProtocolsInput is an input type that accepts ResourceProtocolsArgs and ResourceProtocolsOutput values.
// You can construct a concrete instance of `ResourceProtocolsInput` via:
//
//	ResourceProtocolsArgs{...}
type ResourceProtocolsInput interface {
	pulumi.Input

	ToResourceProtocolsOutput() ResourceProtocolsOutput
	ToResourceProtocolsOutputWithContext(context.Context) ResourceProtocolsOutput
}

type ResourceProtocolsArgs struct {
	// Whether to allow ICMP (ping) traffic
	AllowIcmp pulumi.BoolPtrInput       `pulumi:"allowIcmp"`
	Tcp       ResourceProtocolsTcpInput `pulumi:"tcp"`
	Udp       ResourceProtocolsUdpInput `pulumi:"udp"`
}

func (ResourceProtocolsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceProtocols)(nil)).Elem()
}

func (i ResourceProtocolsArgs) ToResourceProtocolsOutput() ResourceProtocolsOutput {
	return i.ToResourceProtocolsOutputWithContext(context.Background())
}

func (i ResourceProtocolsArgs) ToResourceProtocolsOutputWithContext(ctx context.Context) ResourceProtocolsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceProtocolsOutput)
}

func (i ResourceProtocolsArgs) ToResourceProtocolsPtrOutput() ResourceProtocolsPtrOutput {
	return i.ToResourceProtocolsPtrOutputWithContext(context.Background())
}

func (i ResourceProtocolsArgs) ToResourceProtocolsPtrOutputWithContext(ctx context.Context) ResourceProtocolsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceProtocolsOutput).ToResourceProtocolsPtrOutputWithContext(ctx)
}

// ResourceProtocolsPtrInput is an input type that accepts ResourceProtocolsArgs, ResourceProtocolsPtr and ResourceProtocolsPtrOutput values.
// You can construct a concrete instance of `ResourceProtocolsPtrInput` via:
//
//	        ResourceProtocolsArgs{...}
//
//	or:
//
//	        nil
type ResourceProtocolsPtrInput interface {
	pulumi.Input

	ToResourceProtocolsPtrOutput() ResourceProtocolsPtrOutput
	ToResourceProtocolsPtrOutputWithContext(context.Context) ResourceProtocolsPtrOutput
}

type resourceProtocolsPtrType ResourceProtocolsArgs

func ResourceProtocolsPtr(v *ResourceProtocolsArgs) ResourceProtocolsPtrInput {
	return (*resourceProtocolsPtrType)(v)
}

func (*resourceProtocolsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceProtocols)(nil)).Elem()
}

func (i *resourceProtocolsPtrType) ToResourceProtocolsPtrOutput() ResourceProtocolsPtrOutput {
	return i.ToResourceProtocolsPtrOutputWithContext(context.Background())
}

func (i *resourceProtocolsPtrType) ToResourceProtocolsPtrOutputWithContext(ctx context.Context) ResourceProtocolsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceProtocolsPtrOutput)
}

type ResourceProtocolsOutput struct{ *pulumi.OutputState }

func (ResourceProtocolsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceProtocols)(nil)).Elem()
}

func (o ResourceProtocolsOutput) ToResourceProtocolsOutput() ResourceProtocolsOutput {
	return o
}

func (o ResourceProtocolsOutput) ToResourceProtocolsOutputWithContext(ctx context.Context) ResourceProtocolsOutput {
	return o
}

func (o ResourceProtocolsOutput) ToResourceProtocolsPtrOutput() ResourceProtocolsPtrOutput {
	return o.ToResourceProtocolsPtrOutputWithContext(context.Background())
}

func (o ResourceProtocolsOutput) ToResourceProtocolsPtrOutputWithContext(ctx context.Context) ResourceProtocolsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceProtocols) *ResourceProtocols {
		return &v
	}).(ResourceProtocolsPtrOutput)
}

// Whether to allow ICMP (ping) traffic
func (o ResourceProtocolsOutput) AllowIcmp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceProtocols) *bool { return v.AllowIcmp }).(pulumi.BoolPtrOutput)
}

func (o ResourceProtocolsOutput) Tcp() ResourceProtocolsTcpOutput {
	return o.ApplyT(func(v ResourceProtocols) ResourceProtocolsTcp { return v.Tcp }).(ResourceProtocolsTcpOutput)
}

func (o ResourceProtocolsOutput) Udp() ResourceProtocolsUdpOutput {
	return o.ApplyT(func(v ResourceProtocols) ResourceProtocolsUdp { return v.Udp }).(ResourceProtocolsUdpOutput)
}

type ResourceProtocolsPtrOutput struct{ *pulumi.OutputState }

func (ResourceProtocolsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceProtocols)(nil)).Elem()
}

func (o ResourceProtocolsPtrOutput) ToResourceProtocolsPtrOutput() ResourceProtocolsPtrOutput {
	return o
}

func (o ResourceProtocolsPtrOutput) ToResourceProtocolsPtrOutputWithContext(ctx context.Context) ResourceProtocolsPtrOutput {
	return o
}

func (o ResourceProtocolsPtrOutput) Elem() ResourceProtocolsOutput {
	return o.ApplyT(func(v *ResourceProtocols) ResourceProtocols {
		if v != nil {
			return *v
		}
		var ret ResourceProtocols
		return ret
	}).(ResourceProtocolsOutput)
}

// Whether to allow ICMP (ping) traffic
func (o ResourceProtocolsPtrOutput) AllowIcmp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceProtocols) *bool {
		if v == nil {
			return nil
		}
		return v.AllowIcmp
	}).(pulumi.BoolPtrOutput)
}

func (o ResourceProtocolsPtrOutput) Tcp() ResourceProtocolsTcpPtrOutput {
	return o.ApplyT(func(v *ResourceProtocols) *ResourceProtocolsTcp {
		if v == nil {
			return nil
		}
		return &v.Tcp
	}).(ResourceProtocolsTcpPtrOutput)
}

func (o ResourceProtocolsPtrOutput) Udp() ResourceProtocolsUdpPtrOutput {
	return o.ApplyT(func(v *ResourceProtocols) *ResourceProtocolsUdp {
		if v == nil {
			return nil
		}
		return &v.Udp
	}).(ResourceProtocolsUdpPtrOutput)
}

type ResourceProtocolsTcp struct {
	// Whether to allow or deny all ports, or restrict protocol access within certain port ranges: Can be `RESTRICTED` (only listed ports are allowed), `ALLOW_ALL`, or `DENY_ALL`
	Policy string `pulumi:"policy"`
	// List of port ranges between 1 and 65535 inclusive, in the format `100-200` for a range, or `8080` for a single port
	Ports []string `pulumi:"ports"`
}

// ResourceProtocolsTcpInput is an input type that accepts ResourceProtocolsTcpArgs and ResourceProtocolsTcpOutput values.
// You can construct a concrete instance of `ResourceProtocolsTcpInput` via:
//
//	ResourceProtocolsTcpArgs{...}
type ResourceProtocolsTcpInput interface {
	pulumi.Input

	ToResourceProtocolsTcpOutput() ResourceProtocolsTcpOutput
	ToResourceProtocolsTcpOutputWithContext(context.Context) ResourceProtocolsTcpOutput
}

type ResourceProtocolsTcpArgs struct {
	// Whether to allow or deny all ports, or restrict protocol access within certain port ranges: Can be `RESTRICTED` (only listed ports are allowed), `ALLOW_ALL`, or `DENY_ALL`
	Policy pulumi.StringInput `pulumi:"policy"`
	// List of port ranges between 1 and 65535 inclusive, in the format `100-200` for a range, or `8080` for a single port
	Ports pulumi.StringArrayInput `pulumi:"ports"`
}

func (ResourceProtocolsTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceProtocolsTcp)(nil)).Elem()
}

func (i ResourceProtocolsTcpArgs) ToResourceProtocolsTcpOutput() ResourceProtocolsTcpOutput {
	return i.ToResourceProtocolsTcpOutputWithContext(context.Background())
}

func (i ResourceProtocolsTcpArgs) ToResourceProtocolsTcpOutputWithContext(ctx context.Context) ResourceProtocolsTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceProtocolsTcpOutput)
}

func (i ResourceProtocolsTcpArgs) ToResourceProtocolsTcpPtrOutput() ResourceProtocolsTcpPtrOutput {
	return i.ToResourceProtocolsTcpPtrOutputWithContext(context.Background())
}

func (i ResourceProtocolsTcpArgs) ToResourceProtocolsTcpPtrOutputWithContext(ctx context.Context) ResourceProtocolsTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceProtocolsTcpOutput).ToResourceProtocolsTcpPtrOutputWithContext(ctx)
}

// ResourceProtocolsTcpPtrInput is an input type that accepts ResourceProtocolsTcpArgs, ResourceProtocolsTcpPtr and ResourceProtocolsTcpPtrOutput values.
// You can construct a concrete instance of `ResourceProtocolsTcpPtrInput` via:
//
//	        ResourceProtocolsTcpArgs{...}
//
//	or:
//
//	        nil
type ResourceProtocolsTcpPtrInput interface {
	pulumi.Input

	ToResourceProtocolsTcpPtrOutput() ResourceProtocolsTcpPtrOutput
	ToResourceProtocolsTcpPtrOutputWithContext(context.Context) ResourceProtocolsTcpPtrOutput
}

type resourceProtocolsTcpPtrType ResourceProtocolsTcpArgs

func ResourceProtocolsTcpPtr(v *ResourceProtocolsTcpArgs) ResourceProtocolsTcpPtrInput {
	return (*resourceProtocolsTcpPtrType)(v)
}

func (*resourceProtocolsTcpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceProtocolsTcp)(nil)).Elem()
}

func (i *resourceProtocolsTcpPtrType) ToResourceProtocolsTcpPtrOutput() ResourceProtocolsTcpPtrOutput {
	return i.ToResourceProtocolsTcpPtrOutputWithContext(context.Background())
}

func (i *resourceProtocolsTcpPtrType) ToResourceProtocolsTcpPtrOutputWithContext(ctx context.Context) ResourceProtocolsTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceProtocolsTcpPtrOutput)
}

type ResourceProtocolsTcpOutput struct{ *pulumi.OutputState }

func (ResourceProtocolsTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceProtocolsTcp)(nil)).Elem()
}

func (o ResourceProtocolsTcpOutput) ToResourceProtocolsTcpOutput() ResourceProtocolsTcpOutput {
	return o
}

func (o ResourceProtocolsTcpOutput) ToResourceProtocolsTcpOutputWithContext(ctx context.Context) ResourceProtocolsTcpOutput {
	return o
}

func (o ResourceProtocolsTcpOutput) ToResourceProtocolsTcpPtrOutput() ResourceProtocolsTcpPtrOutput {
	return o.ToResourceProtocolsTcpPtrOutputWithContext(context.Background())
}

func (o ResourceProtocolsTcpOutput) ToResourceProtocolsTcpPtrOutputWithContext(ctx context.Context) ResourceProtocolsTcpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceProtocolsTcp) *ResourceProtocolsTcp {
		return &v
	}).(ResourceProtocolsTcpPtrOutput)
}

// Whether to allow or deny all ports, or restrict protocol access within certain port ranges: Can be `RESTRICTED` (only listed ports are allowed), `ALLOW_ALL`, or `DENY_ALL`
func (o ResourceProtocolsTcpOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceProtocolsTcp) string { return v.Policy }).(pulumi.StringOutput)
}

// List of port ranges between 1 and 65535 inclusive, in the format `100-200` for a range, or `8080` for a single port
func (o ResourceProtocolsTcpOutput) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceProtocolsTcp) []string { return v.Ports }).(pulumi.StringArrayOutput)
}

type ResourceProtocolsTcpPtrOutput struct{ *pulumi.OutputState }

func (ResourceProtocolsTcpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceProtocolsTcp)(nil)).Elem()
}

func (o ResourceProtocolsTcpPtrOutput) ToResourceProtocolsTcpPtrOutput() ResourceProtocolsTcpPtrOutput {
	return o
}

func (o ResourceProtocolsTcpPtrOutput) ToResourceProtocolsTcpPtrOutputWithContext(ctx context.Context) ResourceProtocolsTcpPtrOutput {
	return o
}

func (o ResourceProtocolsTcpPtrOutput) Elem() ResourceProtocolsTcpOutput {
	return o.ApplyT(func(v *ResourceProtocolsTcp) ResourceProtocolsTcp {
		if v != nil {
			return *v
		}
		var ret ResourceProtocolsTcp
		return ret
	}).(ResourceProtocolsTcpOutput)
}

// Whether to allow or deny all ports, or restrict protocol access within certain port ranges: Can be `RESTRICTED` (only listed ports are allowed), `ALLOW_ALL`, or `DENY_ALL`
func (o ResourceProtocolsTcpPtrOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceProtocolsTcp) *string {
		if v == nil {
			return nil
		}
		return &v.Policy
	}).(pulumi.StringPtrOutput)
}

// List of port ranges between 1 and 65535 inclusive, in the format `100-200` for a range, or `8080` for a single port
func (o ResourceProtocolsTcpPtrOutput) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResourceProtocolsTcp) []string {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(pulumi.StringArrayOutput)
}

type ResourceProtocolsUdp struct {
	// Whether to allow or deny all ports, or restrict protocol access within certain port ranges: Can be `RESTRICTED` (only listed ports are allowed), `ALLOW_ALL`, or `DENY_ALL`
	Policy string `pulumi:"policy"`
	// List of port ranges between 1 and 65535 inclusive, in the format `100-200` for a range, or `8080` for a single port
	Ports []string `pulumi:"ports"`
}

// ResourceProtocolsUdpInput is an input type that accepts ResourceProtocolsUdpArgs and ResourceProtocolsUdpOutput values.
// You can construct a concrete instance of `ResourceProtocolsUdpInput` via:
//
//	ResourceProtocolsUdpArgs{...}
type ResourceProtocolsUdpInput interface {
	pulumi.Input

	ToResourceProtocolsUdpOutput() ResourceProtocolsUdpOutput
	ToResourceProtocolsUdpOutputWithContext(context.Context) ResourceProtocolsUdpOutput
}

type ResourceProtocolsUdpArgs struct {
	// Whether to allow or deny all ports, or restrict protocol access within certain port ranges: Can be `RESTRICTED` (only listed ports are allowed), `ALLOW_ALL`, or `DENY_ALL`
	Policy pulumi.StringInput `pulumi:"policy"`
	// List of port ranges between 1 and 65535 inclusive, in the format `100-200` for a range, or `8080` for a single port
	Ports pulumi.StringArrayInput `pulumi:"ports"`
}

func (ResourceProtocolsUdpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceProtocolsUdp)(nil)).Elem()
}

func (i ResourceProtocolsUdpArgs) ToResourceProtocolsUdpOutput() ResourceProtocolsUdpOutput {
	return i.ToResourceProtocolsUdpOutputWithContext(context.Background())
}

func (i ResourceProtocolsUdpArgs) ToResourceProtocolsUdpOutputWithContext(ctx context.Context) ResourceProtocolsUdpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceProtocolsUdpOutput)
}

func (i ResourceProtocolsUdpArgs) ToResourceProtocolsUdpPtrOutput() ResourceProtocolsUdpPtrOutput {
	return i.ToResourceProtocolsUdpPtrOutputWithContext(context.Background())
}

func (i ResourceProtocolsUdpArgs) ToResourceProtocolsUdpPtrOutputWithContext(ctx context.Context) ResourceProtocolsUdpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceProtocolsUdpOutput).ToResourceProtocolsUdpPtrOutputWithContext(ctx)
}

// ResourceProtocolsUdpPtrInput is an input type that accepts ResourceProtocolsUdpArgs, ResourceProtocolsUdpPtr and ResourceProtocolsUdpPtrOutput values.
// You can construct a concrete instance of `ResourceProtocolsUdpPtrInput` via:
//
//	        ResourceProtocolsUdpArgs{...}
//
//	or:
//
//	        nil
type ResourceProtocolsUdpPtrInput interface {
	pulumi.Input

	ToResourceProtocolsUdpPtrOutput() ResourceProtocolsUdpPtrOutput
	ToResourceProtocolsUdpPtrOutputWithContext(context.Context) ResourceProtocolsUdpPtrOutput
}

type resourceProtocolsUdpPtrType ResourceProtocolsUdpArgs

func ResourceProtocolsUdpPtr(v *ResourceProtocolsUdpArgs) ResourceProtocolsUdpPtrInput {
	return (*resourceProtocolsUdpPtrType)(v)
}

func (*resourceProtocolsUdpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceProtocolsUdp)(nil)).Elem()
}

func (i *resourceProtocolsUdpPtrType) ToResourceProtocolsUdpPtrOutput() ResourceProtocolsUdpPtrOutput {
	return i.ToResourceProtocolsUdpPtrOutputWithContext(context.Background())
}

func (i *resourceProtocolsUdpPtrType) ToResourceProtocolsUdpPtrOutputWithContext(ctx context.Context) ResourceProtocolsUdpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceProtocolsUdpPtrOutput)
}

type ResourceProtocolsUdpOutput struct{ *pulumi.OutputState }

func (ResourceProtocolsUdpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceProtocolsUdp)(nil)).Elem()
}

func (o ResourceProtocolsUdpOutput) ToResourceProtocolsUdpOutput() ResourceProtocolsUdpOutput {
	return o
}

func (o ResourceProtocolsUdpOutput) ToResourceProtocolsUdpOutputWithContext(ctx context.Context) ResourceProtocolsUdpOutput {
	return o
}

func (o ResourceProtocolsUdpOutput) ToResourceProtocolsUdpPtrOutput() ResourceProtocolsUdpPtrOutput {
	return o.ToResourceProtocolsUdpPtrOutputWithContext(context.Background())
}

func (o ResourceProtocolsUdpOutput) ToResourceProtocolsUdpPtrOutputWithContext(ctx context.Context) ResourceProtocolsUdpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceProtocolsUdp) *ResourceProtocolsUdp {
		return &v
	}).(ResourceProtocolsUdpPtrOutput)
}

// Whether to allow or deny all ports, or restrict protocol access within certain port ranges: Can be `RESTRICTED` (only listed ports are allowed), `ALLOW_ALL`, or `DENY_ALL`
func (o ResourceProtocolsUdpOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceProtocolsUdp) string { return v.Policy }).(pulumi.StringOutput)
}

// List of port ranges between 1 and 65535 inclusive, in the format `100-200` for a range, or `8080` for a single port
func (o ResourceProtocolsUdpOutput) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceProtocolsUdp) []string { return v.Ports }).(pulumi.StringArrayOutput)
}

type ResourceProtocolsUdpPtrOutput struct{ *pulumi.OutputState }

func (ResourceProtocolsUdpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceProtocolsUdp)(nil)).Elem()
}

func (o ResourceProtocolsUdpPtrOutput) ToResourceProtocolsUdpPtrOutput() ResourceProtocolsUdpPtrOutput {
	return o
}

func (o ResourceProtocolsUdpPtrOutput) ToResourceProtocolsUdpPtrOutputWithContext(ctx context.Context) ResourceProtocolsUdpPtrOutput {
	return o
}

func (o ResourceProtocolsUdpPtrOutput) Elem() ResourceProtocolsUdpOutput {
	return o.ApplyT(func(v *ResourceProtocolsUdp) ResourceProtocolsUdp {
		if v != nil {
			return *v
		}
		var ret ResourceProtocolsUdp
		return ret
	}).(ResourceProtocolsUdpOutput)
}

// Whether to allow or deny all ports, or restrict protocol access within certain port ranges: Can be `RESTRICTED` (only listed ports are allowed), `ALLOW_ALL`, or `DENY_ALL`
func (o ResourceProtocolsUdpPtrOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceProtocolsUdp) *string {
		if v == nil {
			return nil
		}
		return &v.Policy
	}).(pulumi.StringPtrOutput)
}

// List of port ranges between 1 and 65535 inclusive, in the format `100-200` for a range, or `8080` for a single port
func (o ResourceProtocolsUdpPtrOutput) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResourceProtocolsUdp) []string {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAccessInput)(nil)).Elem(), ResourceAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAccessPtrInput)(nil)).Elem(), ResourceAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceProtocolsInput)(nil)).Elem(), ResourceProtocolsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceProtocolsPtrInput)(nil)).Elem(), ResourceProtocolsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceProtocolsTcpInput)(nil)).Elem(), ResourceProtocolsTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceProtocolsTcpPtrInput)(nil)).Elem(), ResourceProtocolsTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceProtocolsUdpInput)(nil)).Elem(), ResourceProtocolsUdpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceProtocolsUdpPtrInput)(nil)).Elem(), ResourceProtocolsUdpArgs{})
	pulumi.RegisterOutputType(ResourceAccessOutput{})
	pulumi.RegisterOutputType(ResourceAccessPtrOutput{})
	pulumi.RegisterOutputType(ResourceProtocolsOutput{})
	pulumi.RegisterOutputType(ResourceProtocolsPtrOutput{})
	pulumi.RegisterOutputType(ResourceProtocolsTcpOutput{})
	pulumi.RegisterOutputType(ResourceProtocolsTcpPtrOutput{})
	pulumi.RegisterOutputType(ResourceProtocolsUdpOutput{})
	pulumi.RegisterOutputType(ResourceProtocolsUdpPtrOutput{})
}
